<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maze of Deception</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Courier New', monospace;
            background-color: #000;
            color: #0f0;
            overflow: hidden;
        }
        canvas {
            display: block;
        }
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 1s ease-in-out;
            pointer-events: none;
        }
        #message {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
            max-width: 80%;
            transition: transform 0.5s ease-out, opacity 0.5s ease-out;
        }
        button {
            padding: 10px 20px;
            font-size: 18px;
            background-color: #0f0;
            color: #000;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        button:hover {
            background-color: #0a0;
            transform: scale(1.1);
        }
        #code-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            perspective: 1000px;
            overflow: hidden;
        }
        .code-line {
            position: absolute;
            color: #0f0;
            font-family: monospace;
            font-size: 14px;
            white-space: nowrap;
            animation: fall 10s linear infinite;
            opacity: 0.7;
        }
        @keyframes fall {
            0% {
                transform: translateY(-100%) translateZ(-500px) rotateX(90deg);
            }
            100% {
                transform: translateY(100%) translateZ(500px) rotateX(90deg);
            }
        }
        #mobileControls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: none;
            flex-wrap: wrap;
            justify-content: center;
            width: 200px;
        }
        .mobileBtn {
            width: 60px;
            height: 60px;
            margin: 5px;
            background-color: rgba(0, 255, 0, 0.3);
            border: 2px solid #0f0;
            color: #0f0;
            font-size: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="code-background"></div>
    <div id="overlay">
        <div id="message"></div>
        <button id="continueBtn" onclick="nextStep()">Continue</button>
    </div>
    <div id="mobileControls">
        <div class="mobileBtn" id="upBtn">↑</div>
        <div class="mobileBtn" id="leftBtn">←</div>
        <div class="mobileBtn" id="rightBtn">→</div>
        <div class="mobileBtn" id="downBtn">↓</div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const overlay = document.getElementById('overlay');
        const messageEl = document.getElementById('message');

        let maze, player, exit;
        const cellSize = 40;
        const playerSize = cellSize / 2;

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        class Cell {
            constructor(x, y) {
                this.x = x;
                this.y = y;
                this.walls = { top: true, right: true, bottom: true, left: true };
                this.visited = false;
            }

            draw() {
                const x = this.x * cellSize;
                const y = this.y * cellSize;
                ctx.strokeStyle = '#0f0';
                ctx.lineWidth = 2;
                if (this.walls.top) {
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                    ctx.lineTo(x + cellSize, y);
                    ctx.stroke();
                }
                if (this.walls.right) {
                    ctx.beginPath();
                    ctx.moveTo(x + cellSize, y);
                    ctx.lineTo(x + cellSize, y + cellSize);
                    ctx.stroke();
                }
                if (this.walls.bottom) {
                    ctx.beginPath();
                    ctx.moveTo(x + cellSize, y + cellSize);
                    ctx.lineTo(x, y + cellSize);
                    ctx.stroke();
                }
                if (this.walls.left) {
                    ctx.beginPath();
                    ctx.moveTo(x, y + cellSize);
                    ctx.lineTo(x, y);
                    ctx.stroke();
                }
            }
        }

        function createMaze(width, height) {
            const grid = [];
            for (let y = 0; y < height; y++) {
                const row = [];
                for (let x = 0; x < width; x++) {
                    row.push(new Cell(x, y));
                }
                grid.push(row);
            }

            function removeWalls(a, b) {
                const dx = a.x - b.x;
                if (dx === 1) {
                    a.walls.left = false;
                    b.walls.right = false;
                } else if (dx === -1) {
                    a.walls.right = false;
                    b.walls.left = false;
                }
                const dy = a.y - b.y;
                if (dy === 1) {
                    a.walls.top = false;
                    b.walls.bottom = false;
                } else if (dy === -1) {
                    a.walls.bottom = false;
                    b.walls.top = false;
                }
            }

            function generateMaze(cell) {
                cell.visited = true;
                const neighbors = [
                    grid[cell.y - 1]?.[cell.x],
                    grid[cell.y + 1]?.[cell.x],
                    grid[cell.y]?.[cell.x - 1],
                    grid[cell.y]?.[cell.x + 1]
                ].filter(n => n && !n.visited);

                while (neighbors.length) {
                    const index = Math.floor(Math.random() * neighbors.length);
                    const next = neighbors[index];
                    removeWalls(cell, next);
                    generateMaze(next);
                    neighbors.splice(index, 1);
                }
            }

            generateMaze(grid[0][0]);
            return grid;
        }

        function drawMaze() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            maze.forEach(row => row.forEach(cell => cell.draw()));
        }

        function drawPlayer() {
            ctx.fillStyle = '#f00';
            ctx.beginPath();
            ctx.arc(player.x * cellSize + cellSize / 2, player.y * cellSize + cellSize / 2, playerSize / 2, 0, Math.PI * 2);
            ctx.fill();
        }

        function drawExit() {
            ctx.fillStyle = '#00f';
            ctx.fillRect(exit.x * cellSize, exit.y * cellSize, cellSize, cellSize);
        }

        function movePlayer(dx, dy) {
            const newX = player.x + dx;
            const newY = player.y + dy;
            if (newX >= 0 && newX < maze[0].length && newY >= 0 && newY < maze.length) {
                const currentCell = maze[player.y][player.x];
                if (dx === 1 && !currentCell.walls.right) player.x = newX;
                if (dx === -1 && !currentCell.walls.left) player.x = newX;
                if (dy === 1 && !currentCell.walls.bottom) player.y = newY;
                if (dy === -1 && !currentCell.walls.top) player.y = newY;
            }
            if (player.x === exit.x && player.y === exit.y) {
                startGlitchEffect();
            }
        }

        function handleKeyDown(e) {
            switch (e.key) {
                case 'ArrowUp': movePlayer(0, -1); break;
                case 'ArrowDown': movePlayer(0, 1); break;
                case 'ArrowLeft': movePlayer(-1, 0); break;
                case 'ArrowRight': movePlayer(1, 0); break;
            }
        }

        function setupMobileControls() {
            const mobileControls = document.getElementById('mobileControls');
            if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
                mobileControls.style.display = 'flex';
                document.getElementById('upBtn').addEventListener('click', () => movePlayer(0, -1));
                document.getElementById('downBtn').addEventListener('click', () => movePlayer(0, 1));
                document.getElementById('leftBtn').addEventListener('click', () => movePlayer(-1, 0));
                document.getElementById('rightBtn').addEventListener('click', () => movePlayer(1, 0));
            }
        }

        function startGame() {
            const mazeWidth = Math.floor(canvas.width / cellSize);
            const mazeHeight = Math.floor(canvas.height / cellSize);
            maze = createMaze(mazeWidth, mazeHeight);
            player = { x: 0, y: 0 };
            exit = { x: mazeWidth - 1, y: mazeHeight - 1 };
            document.addEventListener('keydown', handleKeyDown);
            setupMobileControls();
            createCodeBackground();
            gameLoop();
        }

        function gameLoop() {
            drawMaze();
            drawExit();
            drawPlayer();
            requestAnimationFrame(gameLoop);
        }

        function startGlitchEffect() {
            document.removeEventListener('keydown', handleKeyDown);
            let glitchCount = 0;
            let glitchInterval = setInterval(() => {
                ctx.save();
                ctx.translate(Math.random() * 10 - 5, Math.random() * 10 - 5);
                ctx.scale(1 + Math.random() * 0.1 - 0.05, 1 + Math.random() * 0.1 - 0.05);
                ctx.drawImage(canvas, 0, 0);
                ctx.restore();

                ctx.fillStyle = `rgb(${Math.floor(Math.random() * 255)},${Math.floor(Math.random() * 255)},${Math.floor(Math.random() * 255)})`;
                ctx.fillRect(Math.random() * canvas.width, Math.random() * canvas.height, 100, 100);

                glitchCount++;
                if (glitchCount >= 60) {  // 3 seconds at 50ms intervals
                    clearInterval(glitchInterval);
                    startQuestionnaire();
                }
            }, 50);
        }

        const messages = [
            "Welcome to the void. Are you alone?",
            "Look closely. Can you see the patterns?",
            "I'm watching you through your screen.",
            "Do you feel the chill down your spine?",
            "The shadows... they're moving, aren't they?",
            "Your reality is not what it seems.",
            "I know your deepest fears and darkest secrets."
        ];

        let currentStep = 0;

        function showMessage(msg) {
            messageEl.style.opacity = 0;
            messageEl.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                messageEl.textContent = msg;
                messageEl.style.opacity = 1;
                messageEl.style.transform = 'translateY(0)';
            }, 500);
        }

        function nextStep() {
            if (currentStep < messages.length) {
                showMessage(messages[currentStep]);
                currentStep++;
            } else {
                revealCountry();
            }
        }

        function revealCountry() {
            if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    
                    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`)
                        .then(response => response.json())
                        .then(data => {
                            const country = data.address.country;
                            showMessage(`I see you. You think you're safe in ${country}? There is no escape from this reality.`);
                        })
                        .catch(error => {
                            showMessage("Your digital footprint reveals all.");
                        });
                }, function(error) {
                    showMessage("Even without your location, I can see right through you.");
                });
            } else {
                showMessage("Your digital footprint reveals all.");
            }
            document.getElementById('continueBtn').style.display = 'none';
        }

        function createCodeBackground() {
            const background = document.getElementById('code-background');
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            const lines = 50;

            for (let i = 0; i < lines; i++) {
                const line = document.createElement('div');
                line.className = 'code-line';
                line.style.left = `${Math.random() * 100}%`;
                line.style.animationDelay = `${Math.random() * 10}s`;

                let content = '';
                for (let j = 0; j < 20; j++) {
                    content += characters[Math.floor(Math.random() * characters.length)];
                }
                line.textContent = content;

                background.appendChild(line);
            }
        }

        startGame();
    </script>
</body>
</html>
